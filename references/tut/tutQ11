<!DOCTYPE html>
<html lang="en">
<head>
<title>Week 11 Tutorial</title>
<link href="2041.css" rel="stylesheet"/>
</head>
<body>
<div class="container">
<div id="heading">
Introduction to Flask
</div>
<!DOCTYPE html>

<title>

COMP2041 Week 11 Tutorial Questions

</title>
<link href="/~cs2041/flask.cgi/static/bootstrap.min.css?121200" rel="stylesheet"/>
<link href="/~cs2041/flask.cgi/static/course.css?6554" rel="stylesheet"/>
<script src="/~cs2041/flask.cgi/static/jquery.min.js?95992" type="text/javascript"></script>
<script src="/~cs2041/flask.cgi/static/bootstrap.min.js?37045" type="text/javascript"></script>
<script src="/~cs2041/flask.cgi/static/course.js?1631" type="text/javascript"></script>
<link href="https://cgi.cse.unsw.edu.au/~cs2041/" rel="canonical"/>
<div class="container">
<div id="heading">
<a class="heading_link" href="http://www.cse.unsw.edu.au/~cs2041/17s2/" id="left_heading_link" target="_blank">COMP[29]041 17s2</a>
<span class="dropdown">
<button class="btn dropdown-toggle heading_button" data-toggle="dropdown" type="button">
        Week 11
        <span class="caret"></span>
</button>
<ul class="dropdown-menu">
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/02/questions">Week 02</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/03/questions">Week 03</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/04/questions">Week 04</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/05/questions">Week 05</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/06/questions">Week 06</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/07/questions">Week 07</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/08/questions">Week 08</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/09/questions">Week 09</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/10/questions">Week 10</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/11/questions">Week 11</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/12/questions">Week 12</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/13/questions">Week 13</a></li>
</ul>
</span>
<span class="dropdown">
<button class="btn dropdown-toggle heading_button" data-toggle="dropdown" type="button">
        Tutorial
        <span class="caret"></span>
</button>
<ul class="dropdown-menu">
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/11/questions">Tutorial
                
            </a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/lab/11/questions">Laboratory
                
            </a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/test/11/questions">Weekly Test
                
            </a></li>
</ul>
</span>
<span class="dropdown">
<button class="btn dropdown-toggle heading_button" data-toggle="dropdown" type="button">
        Questions
        <span class="caret"></span>
</button>
<ul class="dropdown-menu">
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/11/questions">Questions
            
            </a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs2041/tut/11/answers">Sample Answers
            
            </a></li>
</ul>
</span>
<a class="heading_link" href="http://www.cse.unsw.edu.au/~cs2041/17s2/" id="right_heading_link" target="_blank">Software Construction</a>
</div>
</div>
<div class="tutlab tut">
<ol>
<ol>
<li>
What is Flask?
<p>
Why is Flask good for COMP[29]041?
</p><p>
Can it also be used for large real applications?

</p><p></p>
</li><li>
Discuss the lines in this "hello world" Flask app:





<pre class="program">

#!/usr/bin/python3

from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'

if __name__ == '__main__':
	app.run(debug=True)

</pre>
<p></p>
</li><li>

How do you the run the Flask  "hello world" Flask app

<p></p>
</li><li>

Discuss this code from game.py which you are given for the lab.

<pre class="program">
@app.route('/', methods=['GET','POST'])
@app.route('/start', methods=['GET','POST'])
def start():
    session['number_to_guess'] = random.randint(1, MAX_NUMBER_TO_GUESS)
    return render_template('game_start.html', max_number_to_guess=MAX_NUMBER_TO_GUESS)
</pre>
<p></p>
</li><li>

What is Jinja?

<p></p>
</li><li>

Discuss the contents of <code>game_start.html</code>:





<pre class="program">

{% extends "game_base.html" %}
{% block body %}
&lt;form method="POST" action="guess"&gt;
    Enter a guess between 1 and {{max_number_to_guess}} (inclusive):
    &lt;input type="textfield" name="guess"&gt;
&lt;/form&gt;
{% endblock %}

</pre>
<p></p>
</li><li>

Discuss what you need to do for the first lab exercise including which files you change or create.
</li><li>

Discuss the contents of <code>students.txt</code>.
</li><li>

Discuss what you need to do for the second lab exercise including which files you change or create.

</li><li>

Discuss the contents of the <code>assessments</code> directory for the peer assessment exercise.



<h3>Revision questions</h3>

The remaining tutorial questions are primarily intended for revision - either this week
or later in session.
<p>
Your tutor may still choose to cover some of the questions time permitting.
</p><p>
</p></li><li>
A CGI script contains the following Perl:
<p>
</p><pre>
print "&lt;!-- ".join(",", map({"$_='".param($_)."'"} param()))."--&gt;\n";
</pre>
<p>
What does it do?
</p><p>
Why is this useful?
</p><p>
Indicate a bug and why it creates a security hole.
</p><p>
Rewrite the code, fixing the bug.

</p><p></p>
</li><li>

The following CGI script sends a message to the script author,
whose login name is <code>you</code>.
The message subject and the message body are available via the
script parameters <code>MailSubject</code> and <code>MailBody</code>
provided by filling in a form.
<p>
Consider for a moment that you are a hacker
(yes, I know it's difficult but just pretend :-).
What are the potential security problems with such a script
that you could exploit?
Can you think of different ways they could be exploited
(be creative, hackers certainly are)?
How can they be overcome?

</p><pre class="program">
#!/usr/bin/perl
use CGI ':all';
print header, start_html;
$subject = param('MailSubject');
$message = param('MailBody');
if (!open(MAIL, "|mail -s \"$subject\" you")) {
    print h1("Sorry, can't send mail.");
} else {
    print MAIL $message;
    close(MAIL);
}
print end_html;
</pre>
<div class="written_answer">
Some of the potential security problems that I know about (there may be others):

<ul>
<li>
People could use backquotes in the <code>$subject</code> variable.
Since the <code>open</code> is done by passing the <code>mail</code>
command line to a shell, the backquotes can be used to execute any
arbitrary command <em>before</em> attempting to run <code>mail</code>.
<p>
Example: <code>$subject == "`/bin/rm -fr .`"</code> executes the command

</p><pre class="program">
mail -s "`/bin/rm -fr *`" you
</pre>

which removes a whole bunch of files, and uses the output of the
<code>rm</code> command (which ought to be the empty string)
as the subject of the mail.
<p>
<i>Note:</i> using single quotes in the mail command
would protect against back ticks, but not the next exploit.
</p></li><li>
People could supply a <code>$subject</code> that terminated the
subject command line argument, sent the mail to some other address,
and then appended some arbitrary Unix commands after a semicolon.
Once again, they can execute an arbitrary command as you.
<p>
Example: <code>$subject == "done\" evil@naughty.com; rm -fr *; echo \"haha tricked"</code> executes
the command

</p><pre class="program">
mail -s "done" evil@naughty.com; rm -fr *; echo "haha tricked" you
</pre>

which sends mail to <code>evil@naughty.com</code> and then removes a
whole bunch of files.

</li><li>
Some versions of <code>mail</code> allow you to put a line like
<code>.!<i>command</i></code> to execute commands while you're
typing in a message (this is typically called a "shell escape").
People could use the <code>mail</code> command's shell escape
mechanisms to embed arbitrary commands in the body of the message.
<p>
Example: <code>$message == "Hello\n.!rm -fr *\nHope you liked the surprise!"</code>
sends the message "Hello\nHope you liked the surprise!", but as a side-effect also
executes the <code>rm</code> command to remove a whole bunch of files.
</p></li></ul>
<p>
To avoid such problems, you would need to make both the
<code>$subject</code> and <code>$message</code> variables
"safe" before using them.
This could be achieved simply by removing any problematic
characters (like backquotes, tildes, exclamation marks, dots).
You should also run the script using Perl's <code>-T</code> flag
(check for "tainted" code),
which causes Perl to not even execute your
script if you haven't taken enough precautions to avoid
(many) potential problems.
</p></div>
</li><li>
The validation algorithm
 used for credit cards is an old one devised by
<a href="http://en.wikipedia.org/wiki/Hans_Peter_Luhn">Hans-Peter Luhn</a>
(1896-1964), a mathematician at IBM.
<p>
The <a href="https://en.wikipedia.org/wiki/Luhn_algorithm">Luhn formula</a> sums all the digits,
with weights of 1 for odd positions and 2 for even positions (so every even digit is
doubled before adding it to the sum). Odd and even is worked out by counting from the right, as usual.
However, if any doubled digit exceeds 9, the two digits of the result are added together,
creating a "reduced sum". This reduced sum is added to the total (not the double digit number).
For example, a digit 7 in an even position is doubled to make 14,
so its contribution to the total is
1+4=5.
The credit card number is valid if the total is a multiple of 10.
</p><p>
Here is a (fictitious) VISA card number,
entered the way web forms should allow if their developers
weren't so lazy:
<b>4564-7953-6021-9047</b>.
Remembering that odd and even positions are counted from the right,
</p><pre>
Code:    4 5 6 4 7 9 5 3 6 0 2 1 9 0 4 7
Weights: 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1
Sum:     8 5 3 4 5 9 1 3 3 0 4 1 9 0 8 7
(reduced):   *   *   *   *       *
</pre>
and the sum is 70, and 70 mod 10 = 0 as required.
<p>
Here is a Python program which takes credit-card numbers
as arguments and indicates whether they are not valid or not.





</p><pre class="program">

#!/usr/bin/python
# written by andrewt@cse.unsw.edu.au as a COMP2041 programming example
# validate a credit card number by calculating its
# checksum using Luhn's formula (https://en.wikipedia.org/wiki/Luhn_algorithm)

import re, sys

def luhn_checksum(number):
    checksum = 0
    digits = reversed(number)
    for (index, digit) in enumerate(digits):
        multiplier = 1 + index % 2
        d = int(digit) * multiplier
        if d &gt; 9:
            d -= 9
        checksum += d
    return checksum

def validate(credit_card):
    number = re.sub(r'\D', '', credit_card)
    if len(number) != 16:
        return credit_card + " is invalid - does not contain exactly 16 digits"
    elif luhn_checksum(number) % 10 == 0:
        return credit_card + " is valid"
    else:
        return credit_card + " is invalid"

if __name__ == "__main__":
    for arg in sys.argv[1:]:
        print(validate(arg))

</pre>



And here is it in action:

<pre>
$ ./creditcard.py 2389423423423467 9182387723427777 9182380923427773 4564456445644564
2389423423423467 is valid
9182387723427777 is invalid
9182380923427773 is invalid
4564456445644564 is valid
</pre>
<ol>
<li>
Discuss how the Luhn Formula is calculated.
</li><li>
Why is useful that credit card numbers satisfy this forumla.
</li><li>
Discuss how the Python works including why the functions <i>reversed</i>, <i>enumerate</i> and <i>int</i> are used.
Also discuss the use of <code>sys.argv</code> and  <code>__name__</code>
</li><li>
Discuss how the features of this program can be translated to Perl.
</li></ol>
<p></p>
</li></ol>
</ol></div>
</div>
<!--
public_html_session_directory=/web/cs2041/17s2
base_directory=/web/cs2041/17s2
public_html_directory=/web/cs2041
scripts_directory=/web/cs2041/17s2/scripts
home_directory=/home/cs2041
bin_directory=/home/cs2041/bin
course_account=cs2041
course_code=COMP2041
course_number=2041
postgraduate_course_code=COMP9041
course_name=Software Construction
unsw_session=17s2
canonical_url=https://cgi.cse.unsw.edu.au/~cs2041/
github_repo_url=https://github.com/COMP2041UNSW/course_materials
course_forum_url=https://piazza.com/class/j5ji4vjjra62a3
lecture_recordings_url=https://moodle.telt.unsw.edu.au/course/view.php?id=27708
WORK=/web/cs2041/17s2/work
OUT=/web/cs2041/17s2/work/.out
MARKED=/web/cs2041/17s2/work/.out/.marked
SMSDB=/web/cs2041/17s2/work/17s2db.sms
tlb_directory=/web/cs2041/17s2/tlb
lecture_directory=/web/cs2041/17s2/lec
flask_cache_directory=/web/cs2041/17s2/flask_cache
testing_results_file=/web/cs2041/17s2/work/testing_results.json
enrollments_file=/web/cs2041/17s2/work/enrollments.json
unsw_ldap_password_file=/web/cs2041/.unsw_ldap_password
autotest_upload_url=https://cgi.cse.unsw.edu.au/~cs2041/cgi/autotest_upload.cgi
PATH=/web/cs2041/17s2/scripts:/home/cs2041/bin:/bin/:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/home/class/bin:/home/give/stable/bin.:/bin:/usr/bin:/usr/local/bin
directory_relative_pathname=tlb/11
url=https://cgi.cse.unsw.edu.au/~cs2041/flask.cgi/tut/11/questions
directory_url=https://cgi.cse.unsw.edu.au/~cs2041/tut/11/
url_root=https://cgi.cse.unsw.edu.au/~cs2041/
script_root=/~cs2041/flask.cgi
current_lecture_topic=exam
current_week=13
week=11
exercise_name=tut11
tut_or_lab_or_test=tut
questions_or_answers=questions
programs=&lt;programs&gt;

-->
</body></html>